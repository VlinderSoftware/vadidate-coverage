name: Build and Release

on:
  push:
    branches:
      - 'release/v*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'release/v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vlindersoftware/validate-coverage

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For main branch pushes: 'main' tag for development
            type=raw,value=main,enable={{is_default_branch}}
            # For release branches: branch name tag (without pattern matching)
            type=ref,event=branch
            # For tags: semver patterns
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag only for release tags
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Parse version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT
          
      - name: Update major version tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Delete and recreate major version tag
          git tag -d ${{ steps.version.outputs.major }} || true
          git push origin :refs/tags/${{ steps.version.outputs.major }} || true
          git tag ${{ steps.version.outputs.major }}
          git push origin ${{ steps.version.outputs.major }}
          
          # Delete and recreate minor version tag  
          git tag -d ${{ steps.version.outputs.minor }} || true
          git push origin :refs/tags/${{ steps.version.outputs.minor }} || true
          git tag ${{ steps.version.outputs.minor }}
          git push origin ${{ steps.version.outputs.minor }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Coverage Validation Action ${{ steps.version.outputs.version }}
            
            Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
            
            ### Usage
            ```yaml
            - name: Validate Coverage
              uses: vlindersoftware/validate-coverage@${{ steps.version.outputs.version }}
              with:
                coverage-file: 'coverage/cobertura.xml'
                minimum-coverage: '85'
            ```
            
            ### Changes in this release
            - Built and tested Docker image
            - Published to GitHub Container Registry
            
            ### Docker Image Details
            - **Registry**: ${{ env.REGISTRY }}
            - **Image**: ${{ env.IMAGE_NAME }}
            - **Digest**: ${{ needs.build.outputs.image-digest }}
            
          draft: false
          prerelease: false

  test:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    strategy:
      matrix:
        coverage-type: [clover, cobertura, jacoco]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Test Docker image
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/examples:/workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }} \
            /workspace/${{ matrix.coverage-type }}.xml 80 ${{ matrix.coverage-type }}
